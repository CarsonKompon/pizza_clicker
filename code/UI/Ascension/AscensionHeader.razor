@using Sandbox;
@using Sandbox.UI;
@using System;

@attribute [StyleSheet]

@namespace PizzaClicker

@if (Player == null) {
    return;
}

<root class="header @ClassNames">
    <div @ref="ButtonPanel" class="ascend-button">
        <div class="bar">
            <div @ref="ProgressFill" class="bar-fill" />
        </div>

        <div class="info">
            <p>Press and hold to ascend</p>
            <p class="sub">You will ascend with @(Levels) level(s)</p>
        </div>

        <div class="hover-panel">
            <div class="stuff">
                <p>@(NumberHelper.ToStringAbbreviated(Levels)) levels will bring you to level @(NumberHelper.ToStringAbbreviated(PlayerLevel)) and will grant you +@(Levels)% pizzas/sec in your next life.</p>
                <p>You need @(NumberHelper.ToStringAbbreviated(RemainingPizzas)) more pizzas for the next level.</p>
            </div>

            <div class="bar">
                <div @ref="NextProgressFill" class="bar-fill" />
            </div>
        </div>
    </div>
</root>

@code
{
    public Player Player { get; set; }

    private Panel ProgressFill { get; set; }
    private Panel NextProgressFill { get; set; }
    private Panel ButtonPanel { get; set; }
    private float Progress = 0f;

    private string ClassNames => (PlayerLevel == 0) ? "hidden" : "";
    private double PlayerLevel => Player.LegacyDough;
    private double Levels => PlayerLevel - Player.LastLevel;
    private double TotalPizzaCount => Player.TotalPizzasBaked + Player.TotalPizzasBakedAllTime;

    private double NextCost
    {
        get {
            var cost = GetLevelCost(PlayerLevel + 1);

            while ((TotalPizzaCount - Player.TotalLegacyBaked) >= cost) {
                Player.TotalLegacyBaked += cost;
                Player.LegacyDough += 1;

                cost = GetLevelCost(PlayerLevel + 1);
            }

            return cost;
        }
    }

    private double RemainingPizzas => NextCost - (TotalPizzaCount - Player.TotalLegacyBaked);
    private float NextProgress => (float)((TotalPizzaCount - Player.TotalLegacyBaked) / NextCost);

    private bool IsInitialized => ProgressFill != null && NextProgressFill != null && ButtonPanel != null;

    public override void Tick()
    {
        if (!IsInitialized) {
            return;
        }

        ProgressFill.Style.Width = Length.Percent(Progress * 100f);
        NextProgressFill.Style.Width = Length.Percent(NextProgress * 100f);

        if (HasActive && !GameMenu.Instance.Ascending) {
            Progress += Time.Delta / 10f;

            if (Progress >= 1f) {
                Progress = 1f;
                Player.StartAscension();
            }
        } else {
            Progress -= Time.Delta * 4f;

            if (Progress <= 0f) {
                Progress = 0f;
            }
        }

        Random rand = new();
        var shake = 10f * Progress;

        ButtonPanel.Style.Top = Length.Pixels(rand.Float(-shake, shake));
        ButtonPanel.Style.Left = Length.Pixels(rand.Float(-shake, shake));
    }

    private double GetLevelCost(double level)
    {
        return Math.Pow(level, 3d) * 1_000_000_000_000d;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(TotalPizzaCount);
    }
}
