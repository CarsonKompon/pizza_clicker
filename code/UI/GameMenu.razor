@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Sandbox.Menu;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@attribute [StyleSheet]

@namespace PizzaClicker

<root>

    <div class="background-overlay" />

    <div class="menu-buttons">

        <Leaderboard Players=@Players />

        <AchievementMenu Player=@LocalPlayer />

    </div>

    <PizzaCount Player=@LocalPlayer />

    <div class="pizza-button" onclick=@ClickPizza />

    <div class="shop">
        @if(LocalPlayer != null)
        {
            <div class="upgrades @((LocalPlayer.AvailableUpgrades().Count > 0) ? "" : "hidden")">
                <h1>Upgrades</h1>
                <div class="upgrade-content">
                    @foreach(var upgrade in LocalPlayer.AvailableUpgrades().OrderBy(u => u.Cost))
                    {
                        <UpgradeButton Upgrade=@upgrade Player=@LocalPlayer />
                    }
                </div>
            </div>
        }
        <div class="buildings">
            <h1>Buildings</h1>
            <div class="building-list">
                @foreach(var building in AllBuildings)
                {
                    <BuildingButton Building=@building Player=@LocalPlayer />
                }
            </div>
        </div>
    </div>

    <Notifications />

    <Chatbox @ref="Chat" Lobby=@Lobby />

</root>

@code
{
    // UI References
    public static GameMenu Instance { get; set; }
    public static Chatbox Chat { get; set; }

    // Lobby Variables
    public ILobby Lobby { get; set; } = Game.Menu.Lobby;
    public List<Player> Players { get; set; } = new List<Player>();

    // Game Variables
    public Player LocalPlayer => Players.FirstOrDefault(p => p.Member.Id == Game.SteamId);
    public static List<Building> AllBuildings { get; set; } = new List<Building>();
    public static List<Achievement> AllAchievements { get; set; } = new List<Achievement>();
    public static List<Upgrade> AllUpgrades { get; set; } = new List<Upgrade>();
    public static List<Skill> AllSkills { get; set; } = new List<Skill>();

    // Timers
    RealTimeSince LastSave = 0f;
    RealTimeSince LastNetworkSync = 0f;

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            Instance = this;

            Lobby.OnMemberEnter += OnPlayerJoined;
            Lobby.OnMemberLeave += OnPlayerLeft;

            AllBuildings = new List<Building>();
			foreach(TypeDescription typeDesc in TypeLibrary.GetTypes<Building>())
			{
                Building building = TypeLibrary.Create<Building>(typeDesc.TargetType);
				if(building.Cost <= 0) continue;
                AllBuildings.Add(building);
			}
            AllBuildings = AllBuildings.OrderBy(b => b.Cost).ToList();

            AllAchievements = new List<Achievement>();
            foreach(TypeDescription typeDesc in TypeLibrary.GetTypes<Achievement>())
            {
                Achievement achievement = TypeLibrary.Create<Achievement>(typeDesc.TargetType);
                if(achievement.Ident == "none") continue;
                AllAchievements.Add(achievement);
            }

            AllUpgrades = new List<Upgrade>();
            foreach(TypeDescription typeDesc in TypeLibrary.GetTypes<Upgrade>())
            {
                Upgrade upgrade = TypeLibrary.Create<Upgrade>(typeDesc.TargetType);
                if(upgrade.Cost <= 0) continue;
                AllUpgrades.Add(upgrade);
            }

            AllSkills = new List<Skill>();
            foreach(TypeDescription typeDesc in TypeLibrary.GetTypes<Skill>())
            {
                Skill skill = TypeLibrary.Create<Skill>(typeDesc.TargetType);
                if(skill.Cost <= 0) continue;
                AllSkills.Add(skill);
            }

            InitPlayer(Game.SteamId);
        }
    }

    public override void Tick()
    {
        Lobby.ReceiveMessages(OnNetworkMessage);

        LocalPlayer?.Update();

        if(LastSave > 1f)
        {
            LocalPlayer?.Save();
            LastSave = 0f;
        }

        if(LastNetworkSync > 2f)
        {
            NetworkPlayerUpdate(LocalPlayer);
            LastNetworkSync = 0f;
        }

    }

    void InitPlayer(long steamid)
    {
        Player player;
        if(steamid == Game.SteamId)
        {
            player = Player.LoadPlayer();
            Players.Add(player);
            NetworkPlayerUpdate(player);
        }
        else
        {
            player = new Player(steamid);
            Players.Add(player);
        }

        Chat.CreateChatEntry("", player.Member.Name + " opened their pizzeria!", "join-message");
    }

    void ClickPizza()
    {
        double val = LocalPlayer.Click();

        string particleText = "+" + NumberHelper.ToStringAbbreviated(val);
        var particle = new TextParticle(Mouse.Position * ScaleFromScreen, particleText, (LocalPlayer.ClickFrenzy > 0 ? "gold" : ""), true);
        AddChild(particle);
    }

    public void SpawnGoldPizza()
    {
        Random rand = new Random();
        var goldenPizza = new GoldPizza(new Vector2(rand.Next(10, 80), rand.Next(10, 80)), LocalPlayer.GoldDuration);
        AddChild(goldenPizza);
    }

    void OnPlayerJoined(Friend member)
    {
        InitPlayer(member.Id);
    }

    void OnPlayerLeft(Friend member)
    {
        Players.RemoveAll(p => p.Member.Id == member.Id);
        Chat.CreateChatEntry(member.Name, " has closed their pizzeria!", "leave-message");
    }

}