@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Sandbox.Menu;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@attribute [StyleSheet]

@namespace PizzaClicker

<root>

    <div class="background-overlay" />

    <Leaderboard Players=@Players />

    <p class="pizza-count">@(LocalPlayer?.Pizzas ?? 0) Pizzas</p>

    <div class="pizza-button" onclick=@ClickPizza />

    <div @ref="UnitsPanel" class="units">
        @foreach(var building in AllBuildings)
        {
            <BuildingButton Building=@building Player=@LocalPlayer />
        }
    </div>

    <Chatbox @ref="Chat" Lobby=@Lobby />

</root>

@code
{
    // UI References
    Chatbox Chat { get; set; }
    Panel UnitsPanel { get; set; }

    // Lobby Variables
    public ILobby Lobby { get; set; } = Game.Menu.Lobby;
    public List<Player> Players { get; set; } = new List<Player>();

    // Game Variables
    public Player LocalPlayer => Players.FirstOrDefault(p => p.Member.Id == Game.SteamId);
    public List<Building> AllBuildings { get; set; } = new List<Building>();

    // Timers
    RealTimeSince LastSave = 0f;
    RealTimeSince LastNetworkSync = 0f;

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            Lobby.OnMemberEnter += OnPlayerJoined;
            Lobby.OnMemberLeave += OnPlayerLeft;

            InitPlayer(Game.SteamId);

            AllBuildings = new List<Building>();
			foreach(TypeDescription typeDesc in TypeLibrary.GetTypes<Building>())
			{
                Building building = TypeLibrary.Create<Building>(typeDesc.TargetType);
				if(building.Cost <= 0) continue;
                AllBuildings.Add(building);
			}
            AllBuildings = AllBuildings.OrderBy(b => b.Cost).ToList();
        }
    }

    public override void Tick()
    {
        Lobby.ReceiveMessages(OnNetworkMessage);

        if(LastSave > 1f)
        {
            LocalPlayer?.Save();
            LastSave = 0f;
        }

        if(LastNetworkSync > 2f)
        {
            NetworkPlayerUpdate(LocalPlayer);
            LastNetworkSync = 0f;
        }
    }

    void InitPlayer(long steamid)
    {
        Player player;
        if(steamid == Game.SteamId)
        {
            player = Player.LoadPlayer();
            Players.Add(player);
            NetworkPlayerUpdate(player);
        }
        else
        {
            player = new Player(steamid);
            Players.Add(player);
        }

        Chat.CreateChatEntry("", player.Member.Name + " opened their pizzeria with " + player.Pizzas + " pizzas!", "join-message");
    }

    void ClickPizza()
    {
        LocalPlayer.Click();

        string particleText = "+" + LocalPlayer.PizzasPerClick.ToString();
        var particle = new TextParticle(Mouse.Position * ScaleFromScreen, particleText);
        AddChild(particle);
    }

    void OnPlayerJoined(Friend member)
    {
        InitPlayer(member.Id);
    }

    void OnPlayerLeft(Friend member)
    {
        Players.RemoveAll(p => p.Member.Id == member.Id);
        Chat.CreateChatEntry(member.Name, " has closed their pizzeria!", "leave-message");
    }

}