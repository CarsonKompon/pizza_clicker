@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Sandbox.Menu;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@attribute [StyleSheet]

@namespace PizzaClicker

<root onclick=@Pressed class=@CanAfford >

    <div class="main">
        <p class="count">@("x" + BuildingCount.ToString())</p>

        <div class="content">
        
            <img src="/ui/buildings/@(Building.Ident).png" class="icon" />
            
            <div class="info">

                <p class="name">@Building.Name</p>

                <div class="sub-info">

                    <p class="price">@(CostString) pizzas</p>
                    <p class="pps">@(NumberHelper.ToStringAbbreviated(Building.PizzasPerSecond)) pizzas/sec</p>

                </div>

            </div>

            <div class="progress-bar">
                <div @ref="ProgressBar" class="progress-fill" />
            </div>

        </div>
    </div>

    <div class="hover-info">
        <div class="header">
            <img src="/ui/buildings/@(Building.Ident).png" class="icon" />
            <div class="info">
                <p class="name">@Building.Name</p>
                <p class="count">(Currently own @(BuildingCount.ToString()))</p>
            </div>
            <p class="price">@(CostString) pizzas</p>
        </div>
        <div class="body">
            <p>Each @(Building.Name) produces @(NumberHelper.ToStringAbbreviated(Building.PizzasPerSecond)) pizzas per second</p>
            @if(BuildingCount > 0)
            {
                <p>@(BuildingCount.ToString()) @(Building.Name)s producing @(GetTotalPPS()) pizzas per second (@(GetTotalPPSPercentage())% of total PpS)</p>
            }
        </div>
    </div>

</root>

@code
{
    Panel ProgressBar { get; set; }

    // Code References
    public Building Building { get; set; }
    public Player Player { get; set; }

    ulong BuildingCount => Player.GetBuildingCount(Building.Ident);

    // string that returns Cost as string with commas
    string CostString => NumberHelper.ToStringAbbreviated(Building.GetCost(Player));
    string PPSString => GetPPS();
    string CanAfford => (Player.Pizzas >= Building.GetCost(Player)) ? "" : "cant-afford";

    string GetPPS()
    {
        var pps = Building.GetPizzasPerSecond(Player);
        if(pps < 1000)
        {
            var result = pps.ToString("F1");
            if(result.EndsWith(".0"))
            {
                result = result.Substring(0, result.Length - 2);
            }
            return result;
        }
        return NumberHelper.ToStringAbbreviated(pps);
    }

    string GetTotalPPS()
    {
        var buildingPPS = Building.GetPizzasPerSecond(Player);
        return NumberHelper.ToStringAbbreviated(buildingPPS);
    }

    string GetTotalPPSPercentage()
    {
        var totalPPS = Player.PizzasPerSecond;
        var buildingPPS = Building.GetPizzasPerSecond(Player);
        var percentage = (buildingPPS * 100) / totalPPS;
        return percentage.ToString("F1");
    }

    void Pressed()
    {
        Player.BuyBuilding(Building);
    }

    public override void Tick()
    {
        var progress = MathX.Clamp((float)((Player.Pizzas * 100) / Building.GetCost(Player)), 0, 100);
        ProgressBar.Style.Width = Length.Percent(progress);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(BuildingCount, CostString, PPSString, CanAfford);
    }
}