@using Sandbox;
@using Sandbox.UI;
@using System;
@using Buildings;

@attribute [StyleSheet]

@namespace PizzaClicker

@if (Player == null || Building == null) {
    return;
}

<root onclick=@Pressed class="@ClassNames">
    <div class="main">
        <p class="count">@("x" + BuildingCount.ToString())</p>

        <div class="content">
            <img src="/ui/buildings/@(Building.Ident).png" class="icon" />

            <div class="info">
                <p class="name">@Building.Name</p>

                <div class="sub-info">
                    <p class="price">@(CostString) pizzas</p>
                    <p class="pps">@(NumberHelper.ToStringAbbreviated(Building.GetIndividualPizzasPerSecond(Player))) pizzas/sec</p>
                </div>
            </div>

            <div class="progress-bar">
                <div @ref="ProgressBar" class="progress-fill" />
            </div>
        </div>
    </div>
</root>

@code
{
    public Building Building { get; set; }
    public Player Player { get; set; }

    private ulong BuildingCount => Player.GetBuildingCount(Building.Ident);
    private double BuildingCost => Building.GetCost(Player, BuildingCount);
    private double BuildingPPS => Building.GetPizzasPerSecond(Player, BuildingCount);
    private string CostString => NumberHelper.ToStringAbbreviated(BuildingCost);
    private string PPSString => PPS;
    private string CanAfford => (Player.Pizzas >= BuildingCost && BuildingCount < 4000) ? "" : "cant-afford";
    private string IsUnlocked => (Building.Ident == "rolling_pin" || BuildingCount > 0 || Player.Pizzas > Building.Cost) ? "" : "locked";
    private string IsVisible => (Building.Ident == "rolling_pin" || BuildingCount > 0 || Player.TotalPizzasBaked >= Building.Cost) ? "" : "hidden";

    private string ClassNames
    {
        get {
            var val = $"{CanAfford} {IsUnlocked} {IsVisible}";

            if (Player.GetTemporaryMultiplier(Building.Ident) > 1) {
                val += " gold";
            }

            return val;
        }
    }

    private Panel ProgressBar { get; set; }

    private BuildingHover HoverPanel;

    private bool IsInitialized => ProgressBar != null;

    private string PPS
    {
        get {
            var pps = BuildingPPS;
            if (pps < 1000) {
                return pps.ToString("F1").TrimEnd(new[] { '0', '.' });
            }

            return NumberHelper.ToStringAbbreviated(pps);
        }
    }

    private string TotalPPS => NumberHelper.ToStringAbbreviated(BuildingPPS);

    private string TotalPPSPercentage
    {
        get {
            var percentage = (BuildingPPS * 100) / Player.PizzasPerSecond;
            return percentage.ToString("F1");
        }
    }

    private void Pressed()
    {
        if (BuildingCount < 4000) {
            Player.BuyBuilding(Building);
        }
    }

    protected override void OnMouseOver(MousePanelEvent e)
    {
        if (HoverPanel == null) {
            HoverPanel = new() {
                Building = Building,
                Player = Player,
                ParentButton = this
            };

            GameMenu.Instance.Panel.AddChild(HoverPanel);
        }
    }

    protected override void OnMouseOut(MousePanelEvent e)
    {
        if (HoverPanel != null) {
            HoverPanel.Delete(true);
            HoverPanel = null;
        }
    }

    public override void Tick()
    {
        if (!IsInitialized) {
            return;
        }

        var progress = MathX.Clamp((float)((Player.Pizzas * 100) / BuildingCost), 0, 100);
        ProgressBar.Style.Width = Length.Percent(progress);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(BuildingCount, CostString, PPSString, CanAfford, IsUnlocked, IsVisible);
    }
}
